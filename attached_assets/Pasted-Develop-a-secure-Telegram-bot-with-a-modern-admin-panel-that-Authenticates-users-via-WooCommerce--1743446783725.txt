Develop a secure Telegram bot with a modern admin panel that:
âœ… Authenticates users via WooCommerce order verification.
âœ… Stores user data in PostgreSQL (Telegram ID, email, verification status).
âœ… Prevents multiple users from using the same email.
âœ… Admins can:

Add/remove users.

Manage user verification status.

Add & manage courses (all verified users get access).

Ban/unban users.
âœ… Users can:

Access courses (after verification).
âœ… Modern UI for Admin Panel

Dark UI (Asternity-style)

Admin login page (JWT authentication)
âœ… Security Measures:

Input validation & sanitization (prevent SQL injection).

Rate limiting (prevent brute-force attacks).

JWT-based authentication for admin panel.

Tech Stack:
Backend: Node.js (Express.js)

Database: PostgreSQL

Telegram Bot: Node.js (node-telegram-bot-api)

Admin Panel: React.js (Asternity UI for dark theme)

Authentication: JWT for admin login

API: WooCommerce API for order verification

Core Features:
ðŸ“Œ Telegram Bot:

User enters email â†’ Checks verification.

If verified, access is granted.

If not verified, asks for order ID and checks WooCommerce.

If payment completed, user is stored in PostgreSQL and granted access.

If payment failed, access is denied.

ðŸ“Œ Admin Panel:

Login with JWT authentication.

View all users & their verification status.

Ban/unban users.

Add/remove courses.

ðŸ“Œ User Panel (Telegram UI):

View Courses (Telegram Buttons).

Folder Structure:
graphql
Copy
Edit
telegram-bot-auth/
â”‚â”€â”€ bot.js                 # Main bot script  
â”‚â”€â”€ package.json           # Dependencies & scripts  
â”‚â”€â”€ .env                   # Configuration variables  
â”‚  
â”œâ”€â”€ config/  
â”‚   â”œâ”€â”€ db.js              # PostgreSQL connection  
â”‚   â”œâ”€â”€ woocommerce.js     # WooCommerce API setup  
â”‚  
â”œâ”€â”€ services/  
â”‚   â”œâ”€â”€ authService.js     # User authentication  
â”‚   â”œâ”€â”€ wooService.js      # Fetch WooCommerce order details  
â”‚   â”œâ”€â”€ courseService.js   # Course management  
â”‚  
â”œâ”€â”€ handlers/  
â”‚   â”œâ”€â”€ messageHandler.js  # Handles bot messages  
â”‚   â”œâ”€â”€ adminHandler.js    # Admin functionalities  
â”‚  
â”œâ”€â”€ admin-panel/  
â”‚   â”œâ”€â”€ src/  
â”‚   â”‚   â”œâ”€â”€ components/    # UI Components  
â”‚   â”‚   â”œâ”€â”€ pages/         # Login, Dashboard, User Management  
â”‚   â”‚   â”œâ”€â”€ App.js         # Main React App  
â”‚   â”‚   â”œâ”€â”€ index.js       # Entry point  
â”‚   â”‚   â”œâ”€â”€ api.js         # API requests to backend  
â”‚  
â””â”€â”€ utils/  
    â”œâ”€â”€ security.js        # Security checks & input validation  
    â”œâ”€â”€ logger.js          # Logs activity & errors  
Expected Deliverables:

Production-ready Node.js backend with Telegram bot.

React-based admin panel with a modern dark UI.

PostgreSQL database setup for users and courses.

Secure authentication system with JWT.

WooCommerce order verification system.